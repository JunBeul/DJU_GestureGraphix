{"version":3,"file":"js/350.b180c90a.js","mappings":";;;;;;;;;;;;;;;;;;;;;EACOA,KAAK,EAAC;AAAM;;EACXA,KAAK,EAAC;AAAO;;;2DADnBC,uDAAA,CASM,OATNC,UASM,GARJC,sDAAA,CAAkC,MAAlCC,UAAkC,EAAAC,8CAAA,CAAbC,KAAA,CAAAC,KAAK,OAC1BJ,sDAAA,CAAiB,WAAAE,8CAAA,CAAXC,KAAA,CAAAE,IAAI,OACVL,sDAAA,CAKI,YAJFM,gDAAA,CAGCC,sBAAA;IAHYC,GAAG,EAAC,GAAG;IAAEC,OAAK,EAAEC,QAAA,CAAAC,gBAAgB;IAAEC,EAAE,EAAC;;0DACjD,MAAuB,qGAApBT,KAAA,CAAAU,iBAAiB,IAAG,wBAClB;;;;;;;AAOZ,4EAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLX,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRQ,iBAAiB,EAAE;IACrB,CAAC;EACH,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,EAAE;EACtB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAME,gBAAe,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACN,IAAI;QAC/C,IAAI,CAACI,gBAAgB,EAAE;UACrB,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;QAC5C;QAEA,MAAMC,UAAS,GAAI,UAAU;QAC7B,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAACF,UAAU,EAAE;UACvCG,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,aAAa,EAAEZ;UACjB,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACK,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAM,IAAIV,KAAK,CAAC,yBAAyB,CAAC;QAC5C,OAAO;UACL,MAAMP,IAAG,GAAI,MAAMS,QAAQ,CAACS,IAAI,EAAE;UAClC,IAAI,CAACpB,iBAAgB,GAAIE,IAAI,CAACmB,KAAK;QACrC;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C;MACF;IACF,CAAC;;IACD,MAAMxB,gBAAgBA,CAAC0B,KAAK,EAAE;MAC5BA,KAAK,CAACC,cAAc,EAAE;MACtB,MAAMC,QAAO,GAAI,mBAAmB;MACpC,IAAI;QACF,MAAMf,QAAO,GAAI,MAAMC,KAAK,CAACc,QAAQ,EAAE;UACrCb,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBjB,iBAAiB,EAAE,IAAI,CAACA;UAC1B,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACW,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAM,IAAIV,KAAK,CAAC,kCAAkC,CAAC;QACrD;QAEA,MAAMP,IAAG,GAAI,MAAMS,QAAQ,CAACS,IAAI,EAAE;QAClCO,KAAK,CAACzB,IAAI,CAAC0B,OAAO,CAAC;MACrB,EAAE,OAAON,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB;MACF;IACF;EACF;AACF,CAAC;;AElF4P;;;;ACAhL;AACV;AACL;;AAE9D,CAA4I;AAC5I,iCAAiC,+BAAe,CAAC,uCAAM,aAAa,MAAM;;AAE1E,qDAAe","sources":["webpack://web/./src/views/emailCertifyView.vue","webpack://web/./src/views/emailCertifyView.vue?9981","webpack://web/./src/views/emailCertifyView.vue?1fe1","webpack://web/./src/views/emailCertifyView.vue?8ee3"],"sourcesContent":["<template>\r\n  <div class=\"warp\">\r\n    <h2 class=\"title\">{{ title }}</h2>\r\n    <p>{{ text }}</p>\r\n    <p>\r\n      <router-link tag=\"a\" @click=\"verifiedComplete\" to=\"/login\"\r\n      >{{ verificationEmail }} 이메일로 회원가입 하고 로그인\r\n        하러가기</router-link\r\n      >\r\n    </p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"emailCertify\",\r\n  data() {\r\n    return {\r\n      title: \"\",\r\n      text: \"\",\r\n      verificationEmail: \"\",\r\n    };\r\n  },\r\n  mounted() {\r\n    this.verifyDecrypt();\r\n  },\r\n  methods: {\r\n    async verifyDecrypt() {\r\n      try {\r\n        const encryptedSUEData = this.$route.query.data;\r\n        if (!encryptedSUEData) {\r\n          throw new Error(\"Invalid encrypted data.\");\r\n        }\r\n\r\n        const decryptUri = \"/decrypt\";\r\n        const response = await fetch(decryptUri, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            encryptedData: encryptedSUEData,\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to decrypt data.\");\r\n        } else {\r\n          const data = await response.json();\r\n          this.verificationEmail = data.email;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error decrypting data:\", error);\r\n        // Handle the error, show a message to the user, etc.\r\n      }\r\n    },\r\n    async verifiedComplete(event) {\r\n      event.preventDefault();\r\n      const veriComp = \"/verifiedComplete\";\r\n      try {\r\n        const response = await fetch(veriComp, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            verificationEmail: this.verificationEmail,\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to complete verification.\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        alert(data.message);\r\n      } catch (error) {\r\n        console.error(error);\r\n        // Handle the error, show a message to the user, etc.\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>","export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./emailCertifyView.vue?vue&type=template&id=149122f7\"","export { default } from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./emailCertifyView.vue?vue&type=script&lang=js\"; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./emailCertifyView.vue?vue&type=script&lang=js\"","import { render } from \"./emailCertifyView.vue?vue&type=template&id=149122f7\"\nimport script from \"./emailCertifyView.vue?vue&type=script&lang=js\"\nexport * from \"./emailCertifyView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\JK\\\\Desktop\\\\캡스톤디자인\\\\GestureGraphix\\\\frontEnd\\\\web\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$data","title","text","_createVNode","_component_router_link","tag","onClick","$options","verifiedComplete","to","verificationEmail","name","data","mounted","verifyDecrypt","methods","encryptedSUEData","$route","query","Error","decryptUri","response","fetch","method","headers","body","JSON","stringify","encryptedData","ok","json","email","error","console","event","preventDefault","veriComp","alert","message"],"sourceRoot":""}